#!/usr/bin/env bash
#shellcheck disable=SC2155,SC2206,SC2016,SC2034,SC2154,SC2015
# void-testmirror
# Require: xbps-install -S curl bc geoip geoip-data geoipupdate iputils

#  Created: 2022/11/05
#  Altered: 2023/04/30
#
#  Copyright (c) 2022-2022, Vilmar Catafesta <vcatafesta@gmail.com>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

#debug
export PS4=$'${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x

#system
readonly APP="${0##*/}"
readonly _VERSION_='0.3.99-20230430'
readonly distro=$(uname -n)
readonly DEPENDENCIES=(bc geoiplookup geoipupdate sed awk tput wget curl)
readonly DEP_PACKAGES=(bc geoip geoip-data geoipupdate sed gawk ncurses wget curl)
declare -i quiet=0 typetest=0 auto=0 nping=0 ncurl=0 update=0
declare -a aHits=()
declare -A mirrors=()
declare -A Amirrors=()
declare -A Aidioma=([pt_BR]=0 [en_US]=1 [de_DE]=2 [fr_FR]=3 [es_ES]=4 [it_IT]=5)
declare -A Alocale=([0]=pt_BR [1]=en_US [2]=de_DE [3]=fr_FR [4]=es_ES [5]=it_IT)
trap 'printf "\n${red}Interrupted! exiting...\n"; cleanup; exit 0' INT TERM HUP

sh_setambiente() {
   readonly true=1
   readonly false=0
   readonly BOOTLOG="/tmp/$APP-$(sh_diahora).log"
	readonly	COLS=$(tput cols)

	#paths/files/urls
	APP_LOCAL="${0##*/}"
	APP_REMOTE="void-testmirror"
	URL_GOOGLE='https://google.com'
	URL_GITHUB="https://raw.githubusercontent.com/vcatafesta/chili/master/${APP_REMOTE}"
   : "${MIRRORPATH:=/usr/share/xmirror/}"
   : "${MIRRORFILE:=mirrors.lst}"
   : "${MIRRORURL:=https://xmirror.voidlinux.org/raw/$MIRRORFILE}"
   : "${MIRRORURLROOT:=https://xmirror.voidlinux.org}"
   : "${MIRRORLIST:=$MIRRORPATH$MIRRORFILE}"

	# flag languages
	: "${PT_BR=0}"
	: "${EN_US=1}"
	: "${DE_DE=2}"
	: "${FR_FR=3}"
	: "${LC_DEFAULT=$(sh_getlocale)}"

	#conf adicionais
	IFS=$' \t\n'
	#SAVEIFS=$IFS
	#sep='\xe2\x94\x82'

	if [ -z "${COLUMNS}" ]; then
		COLUMNS=$(stty size)
		COLUMNS=${COLUMNS##* }
	fi
	if [ "${COLUMNS}" = "0" ]; then
		COLUMNS=80
	fi

	COL=$((COLUMNS - 8))
	SET_COL="\\033[${COL}G" # at the $COL char
	CURS_ZERO="\\033[0G"
}

sh_check_mirror_path() {
	log_info_msg "Checking path $MIRRORPATH"
	[[ ! -d "${MIRRORPATH}" ]] && mkdir -p "${MIRRORPATH}" >> "$BOOTLOG"
	evaluate_retval "0"
	return 0
}

sh_diahora() {
	DIAHORA=$(date +"%d%m%Y-%T")
	DIAHORA="${DIAHORA//:/}"
	printf "%s\n" "$DIAHORA"
	return "$true"
}

info_msg() {
	printf "%s" "\033[1m$*\n\033[m"
}

cleanup() {
	info_msg "Removing temporary files..."
	rm -fv "$BOOTLOG"
	exit 1
}

sh_setvarcolors() {
	reset=$(tput sgr0);			green=$(tput setaf 2);	red=$(tput setaf 124);
	pink=$(tput setaf 129);		bold=$(tput bold);		blue=$(tput setaf 33);
	yellow=$(tput setaf 136);	cyan=$(tput setaf 37);	orange=$(tput setaf 166);
	white=$(tput setaf 15);    violet=$(tput setaf 61); #  purple=$(tput setaf 125);
}

sh_unsetvarcolors() {
	reset='' green='' red='' pink='' bold='' blue='' yellow='' cyan='' orange='' white='' violet='' purple=''
	NORMAL='' SUCCESS='' FAILURE='' BRACKET=''
	sh_logprefix
}

sh_logprefix() {
	NORMAL="${reset}"
	SUCCESS="${green}"
	FAILURE="${red}"
	#INFO="${cyan}"
	BRACKET="${blue}"
	BMPREFIX="     "
	DOTPREFIX="  ${blue}::${reset} "
	SUCCESS_PREFIX="${SUCCESS}  ↑  ${NORMAL}"
	SUCCESS_SUFFIX="${BRACKET}[${SUCCESS}  OK  ${BRACKET}]${NORMAL}"
	FAILURE_PREFIX="${FAILURE}  ↓  ${NORMAL}"
	FAILURE_SUFFIX="${BRACKET}[${FAILURE} FAIL ${BRACKET}]${NORMAL}"
}

sh_val() {
	if [[ ${1} =~ ^([0-9]+)$ ]]; then
		echo "N"
	elif [[ ${1} =~ ^([[:alpha:]]+)$ ]]; then
		echo "C"
	else
		echo "U"
	fi
}

sh_checknet() {
	local xurl="$1"

	#have internet?
	log_info_msg "Testing internet on ${xurl}"
	curl --insecure "$xurl" >/dev/null 2>&1 ||
	{
		evaluate_retval "$?"
		log_msg "No route to the server ($xurl) - Check your internet!"
		return 1
	}
	evaluate_retval "$?"
	return $?
}

evaluate_retval() {
	local error_value="$?"

	if [ $# -gt 0 ]; then
		error_value="$1"
	fi

	if [ "${error_value}" = 0 ]; then
		log_success_msg ""
	else
		log_failure_msg ""
	fi
	return "${error_value}"
}

log_failure_msg() {
	if ! ((quiet)); then
		echo -n -e "${BMPREFIX}${*}"
		echo -e "${CURS_ZERO}${FAILURE_PREFIX}${SET_COL}${FAILURE_SUFFIX}"
	fi
	return 0
}

msg() {
   if ! ((quiet)); then
      local msg=$1
      shift
		printf "%-75s\n" "$(DOT)${bold}${green}$msg${reset}"
   fi
   return
}

msgr() {
	if ! ((quiet)); then
		local msg=$1
		shift
		printf "${green} -> %s${reset}\n"  "$msg"
	fi
	return
}

msgl() {
	if ! ((quiet)); then
		local msg=$1
		shift
		printf "%-*s" $((COLS/2)) "${DOT}$msg"
	fi
	return 0
}

DOT() {
	printf "%s" "${blue}:: ${reset}"
	return 0
}

log_success_msg() {
	if ! ((quiet)); then
		echo -n -e "${BMPREFIX}${*}"
		echo -n -e "${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}\n"
	fi
	return 0
}

log_info_msg() {
	if ! ((quiet)); then
		echo -n -e "${BMPREFIX}${*}"
	fi
	return 0
}

log_msg() {
	if ! ((quiet)); then
		echo -e "${DOTPREFIX}${*}"
	fi
	return 0
}

log_error() {
	if ! ((quiet)); then
		echo -e "   ${FAILURE_PREFIX}${*}"
	fi
	return 0
}

erro() {
   local msg=$1
   shift
   printf "%s\n" "$(DOT)${bold}${yellow}$msg${reset}" >&2
   return
}

write() {
	local msg=$1
	shift
	printf "%s" "$msg"
   return
}

writeln() {
	local msg=$1
	shift
	printf "%s\n" "$msg"
	  return
}

die() {
	local msg=$1; shift
	msg "${red}$msg" "$@" >&2
	exit 1
}

replicate() {
	local Var
	printf -v Var %"$2s" " "  #  Coloca em $Var $1 espaços
	echo "${Var// /$1}"       #  Troca os espaços pelo caractere escolhido
}

padr() {
	local text=$1
	local	ncols=$2
	local char=$3
	if test $# -eq 1; then
		ncols="$COLS"
		char='='
	fi
	printf "%*s\n" "$ncols" "$text" |sed "s/ /$char/g"
}

padl() {
	local text=$1
	local ncols=$2
	local char=$3
	if test $# -eq 1; then
		ncols="$COLS"
		char='='
	fi
	printf "%-*s\n" "$ncols" "$text" |sed "s/ /$char/g"
}

sh_splitarray() {
	local str="$1"
	local pos="$2"
	local sep="${3:-'|'}"
	local array

	[[ $# -eq 3 && "$pos" = "|" && "$sep" =~ ^[0-9]+$ ]] && { sep="$2"; pos="$3";}
	[[ $# -eq 2 && "$pos" = "$sep"                    ]] && { sep="$pos"; pos=1;}
	[[ $# -eq 1 || ! "$pos" =~ ^[0-9]+$               ]] && { pos=1; }

	IFS="$sep" read -r -a array <<< "$str"
	echo "${array[pos-1]}"
}

search_geo() {
	local oldquiet=$quiet
	local geo

	geo=$(geoiplookup "$frepo" | head -1 | sed 's/^.*: //')
	if ! (( quiet )); then
		replicate '=' 100
	fi
	quiet=0
	msg "Recommended repo is : ${orange}$frepo${reset}($geo)"
	if (( nping )); then
		msg "Average time (ping) : ${red}$fping${reset}"
	else
		msg "Average time (curl) : ${red}$fping${reset}"
	fi
	msg "Repository          : $(sh_splitarray "${Amirrors[$frepo]}" 1)"
	msg "Region              : $(sh_splitarray "${Amirrors[$frepo]}" 2)"
	msg "Location            : $(sh_splitarray "${Amirrors[$frepo]}" 3)"
	quiet=$oldquiet
}

print_script()	{
	if ! ((quiet)); then
		local contador=1
		local chash=''

		writeln "#script"
		writeln "${red}"'#------------[ cut here ]------------'"${reset}"
		writeln 'mkdir -p /etc/xbps.d/'
		writeln 'cat >> /etc/xbps.d/00-repository-main.conf << "EOF"'
		writeln '############################################################################'
		writeln '# Result of VOID mirrors'
		writeln '# Generated with void-testmirror'
		writeln '# https://raw.githubusercontent.com/vcatafesta/chili/master/void-testmirror'
		writeln '# https://chililinux.com'
		writeln "# on date: $(date)"
		writeln '############################################################################'

		for list in "${Sorted[@]}"; do
		   ctime=$( cut -d, -f1 <<< "$list")
		   mirror=$( cut -d, -f2 <<< "$list")
			writeln "# top $contador - result: $ctime"
			if ((contador > 1)); then
				chash='#'
			fi
			writeln "${chash}repository=${mirror}current"
			if [[ $mirror = 'http://void.chililinux.com/voidlinux/' || $mirror = 'http://void.chilios.com.br/voidlinux/' ]] ; then
				writeln "${chash}repository=${mirror}current/extras"
			fi
			writeln "${chash}repository=${mirror}current/nonfree"
			writeln "${chash}repository=${mirror}current/multilib"
			writeln "${chash}repository=${mirror}current/multilib/nonfree"
			writeln ""
			((++contador))
		done
		writeln 'EOF'
		writeln "${red}"'#------------[ cut here ]------------'"${reset}"
	fi
}

write_script()	{
	if ((auto)); then
		local cfile='/etc/xbps.d/00-repository-main.conf'
		local contador=1
		local chash=''

		printf "\n%s\n" "${red}writing results to $cfile"
		[[ -d '/etc/xbps.d/' ]] || mkdir -p '/etc/xbps.d/'
		[[ -e "$cfile"       ]] && mv "$cfile" "$cfile.old"

		: >| "$cfile"
		{
			echo "# $cfile"
			echo '############################################################################'
			echo '# Result of VOID mirrors'
			echo '# Generated with void-testmirror'
			echo '# https://raw.githubusercontent.com/vcatafesta/chili/master/void-testmirror'
			echo '# https://chililinux.com'
			echo "# on date: $(date)"
			echo '############################################################################'
		} >> "$cfile"

		for list in "${Sorted[@]}"; do
		   ctime=$( cut -d, -f1 <<< "$list")
		   mirror=$( cut -d, -f2 <<< "$list")
		   geo=$( cut -d, -f3- <<< "$list")
			echo '' 															>> "$cfile"
			echo "# top $contador - ($geo) - result: $ctime"	>> "$cfile"
			if ((contador > 1)); then
				chash='#'
			fi
			{
				echo "${chash}repository=${mirror}current"
				if [[ $mirror = 'http://void.chililinux.com/voidlinux/' || $mirror = 'http://void.chilios.com.br/voidlinux/' ]] ; then
					echo "${chash}repository=${mirror}extras"
				fi
				echo "${chash}repository=${mirror}current/nonfree"
				echo "${chash}repository=${mirror}current/multilib"
				echo "${chash}repository=${mirror}current/multilib/nonfree"
			} >> "$cfile"
			((++contador))
		done
	fi
}

print_top_mirror() {
	if ! ((quiet)); then
		local contador=1
		padl "TOP_10" 100 '='

		for list in "${Sorted[@]}"; do
		   ctime=$(  cut -d, -f1  <<< "$list")
		   mirror=$( cut -d, -f2  <<< "$list")
		   geo=$(    cut -d, -f3- <<< "$list")
			printf "%4d %-20s %-65s %-s\n" "$contador" "$geo" "$mirror" "${green}$ctime${reset}"
			if (( contador > 9 )); then
				return
			fi
			((++contador))
		done
		padr "TOP_10" 100 '='
	fi
}

main_test_mirror() {
	local fields
	local key
	local sorted_list
	local -i REPOSITORY=1
	local -i REGION=2
	local -i LOCATION=3
	local -i TIER=4
	fping=10000
	frepo=0
	contador=1

	sorted_list=$(for key in "${!Amirrors[@]}"; { echo "$key|${Amirrors[$key]}"; } | sort -rt\| -k3)
	while IFS='|' LC_ALL=C read -r -a fields; do
		repo="${fields[0]}"
		filerepo="${fields[1]}"
		geo=$(geoiplookup "$repo" | head -1 | sed 's/^.*: //')
		if ! (( typetest )); then 	# ping
			msgl "Testing (ICMP) for ${orange}$repo${reset} ($geo)"
			ping=$(ping -qnAc3 "$repo" | tail -1 | awk -F'/' '{print $5}')
		else
			msgl "Testing (HTTP) for ${orange}$repo${reset} ($geo)"
			ping=$(curl -s -w '%{time_total}\n' -o /dev/null "$filerepo/current/x86_64-repodata")
		fi
		[[ -n "$ping" ]] && {
			msgr "${pink}Average time: ${red}$ping${reset}"
			aHits+=("$ping,$filerepo,$geo")
			if (( $(bc <<< "$ping<$fping") )); then
				frepo="$repo"
				fping="$ping"
			fi
			((++contador))
			} || msgr "${pink}Average time: ${red}ERROR (not computed)${reset}"
	done <<< "${sorted_list[@]}"

	sh_sorted_array
	search_geo
	print_top_mirror
	if ((auto)); then
		write_script
	else
		print_script
	fi
}

sh_version() {
	printf "%s\n" "${bold}${cyan}${0##*/} v${_VERSION_}${reset}"
}

sh_sorted_array() {
	readarray -t Sorted < <(sort -n < <(printf "%s\n" "${aHits[@]}"))
}

sh_checkDependencies() {
	local d
	local errorFound=0
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		[[ -z $(command -v "$d") ]] && missing+=("$d") && errorFound=1 && printf '%s\n' "${red}${cmsg_ERRO[$LC_DEFAULT]}${reset}: ${cmsg_CommandNotFound[$LC_DEFAULT]} ${cyan}'$d'${reset}"
	done
	if (( errorFound )); then
		echo "${yellow}--------------${cmsg_ImpossivelContinuar[$LC_DEFAULT]}-------------${reset}"
		echo "${cmsg_ImpossivelContinuar1[$LC_DEFAULT]}" >&2
		echo "${cmsg_ImpossivelContinuar2[$LC_DEFAULT]} \$PATH" >&2
		echo "${yellow}-----------------------------------------------${reset}"

		if [[ "$distro" = @(void|void-live|voidlinux) ]] ; then
			echo
			if readconf "${yellow}${cmsg_InstCommand[$LC_DEFAULT]} '${cyan}${missing[*]}${reset}' ?"; then
				if xbps-install -S "${DEP_PACKAGES[@]}"; then
					die "${cmsg_RunNew[$LC_DEFAULT]}"
				else
					die "${cmsg_RunNewErro[$LC_DEFAULT]}"
				fi
			fi
		fi
		die "${cmsg_ERRO[$LC_DEFAULT]}: ${cmsg_InstalacaoAbortada[$LC_DEFAULT]}..."
   fi
}

readconf() {
	if [[ $LC_DEFAULT -eq 0 ]]; then
		read -r -p "$* [S/n]"
	else
		read -r -p "$* [Y/n]"
	fi
	[[ ${REPLY^} == "" ]] && return $false
	[[ ${REPLY^} == N  ]]  && return $true || return $false
}

conf() {
	read -r -p "$1 [Y/n]"
	[[ ${REPLY^} == ""  ]] && return $true
	[[ ${REPLY^} == "Y" ]] && return $true
	[[ ${REPLY^} == N   ]] && return $false
	die "ERR: answer must be Y or N"
}

sh_selfupdate()
{
	echo
   conf "Update ${APP_LOCAL} from internet?"
   LAUTO=$?

   if (( LAUTO )); then
      local link="$URL_GITHUB"
      local tmp_dir="/tmp/chili"

      #internet?
		sh_checknet "${URL_GITHUB}" || return 1

      log_msg "Ok, let's do it..."
      [[ -d "${tmp_dir}" ]] || mkdir -p "${tmp_dir}"
      pushd "${tmp_dir}" >/dev/null 2>&- || return 1

      log_info_msg "${cyan}Clonando $link"
      #Ok, Puxe o arquivo do repositorio agora!
      curl --insecure --silent --remote-name "${link}"
      evaluate_retval
		popd >/dev/null 2>&- || return

      log_info_msg "${cyan}Setting permissions and copying file"
      chmod +x "${tmp_dir}/${APP_REMOTE}"
      evaluate_retval

      log_info_msg "${cyan}Copying file ${yellow}${APP_REMOTE} ${red}to ${yellow}${0}"
      mv "$0" "$0.old"
      cp -apf "${tmp_dir}/${APP_REMOTE}" "$0"
      evaluate_retval

      log_info_msg "${cyan}Removing temporary files"
      [[ -d "${tmp_dir}" ]] && rm -r "${tmp_dir}"
      evaluate_retval
      log_info_msg "${violet}${0} updated successfully, enjoy!"
      evaluate_retval
      exit 0
   fi
   return 1
}

sh_usage() {
   cat <<EOF
${white}void-testmirror v$_VERSION_${reset}
${orange}usage: void-testmirror [options] ${reset}

[options] ${reset}
   ${red}-p  --ping${cyan}          # Use ping for test
   ${red}-c  --curl${cyan}          # Use Curl download for test
   ${red}-a  --auto${cyan}          # automatically configure/write in /etc/xbps.d/ with result obtained results
   ${red}-q  --quiet${cyan}         # Summmary output
   ${red}-u  --update${cyan}        # update this application in the online repository. Need Internet
   ${red}-V  --version${cyan}       # Show application version
   ${red}-n  --nocolor${cyan}       # remove colors from output${reset}
EOF
}

init() {
	while test $# -gt 0; do
      case $1 in
	      -h | -H | --help)
	         sh_usage
	         exit $(($# ? 0 : 1))
	         ;;
	      -V | --version)
	         sh_version
	         exit $(($# ? 0 : 1))
	         ;;
	      -n | --nocolor)
	         sh_unsetvarcolors
	         ;;
	      -q | --quiet)
	         quiet=1
	         ;;
	      -a | --auto)
	         auto=1
				;;
	      -p | -P | --ping)
				nping=1
				typetest=0
				appexec+=('main_test_mirror')
	         ;;
	      -c | -C | --curl)
				ncurl=1
				typetest=1
				appexec+=('main_test_mirror')
	         ;;
	      -u | -U | --update)
				update=1
				appexec+=('sh_selfupdate')
	         ;;
	      *) die "operação não suportada: $1 (use -h for help)" ;;
      esac
      shift
   done
}

sh_getRegion() {
	case "$1" in
		AF) echo "Africa" ;;
		AN) echo "Antarctica" ;;
		AS) echo "Asia" ;;
		EU) echo "Europe" ;;
		NA) echo "North America" ;;
		OC) echo "Oceania" ;;
		SA) echo "South and Central America" ;;
		World) echo "Globally Available" ;;
		*) echo "$1" ;;
	esac
}

sh_getMirrors() {
	local line region url location tier var

	log_info_msg "Attempt to use local list at $MIRRORLIST"
	if ! test -e "$MIRRORLIST"; then
		evaluate_retval 1
		log_error "Unable to continue! Mirror list file not found in path: $MIRRORLIST"
		return 1
	fi
	evaluate_retval 0

	while read -r line; do
		[[ "$line" = '#'* ]] && continue
		while IFS=$'\t' read -r region url location tier; do
			var="${url##http://}"
			var="${var##https://}"
			var="${var%%\/*}"
			Amirrors+=(["$var"]="$url|$(sh_getRegion "$region")|$location|$tier")
		done <<< "$line"
	done < "$MIRRORLIST"
	return 0
}

sh_download_mirrors_list() {
	log_info_msg "Fetching new mirror list at ${MIRRORURL}"
	if ! wget --quiet -c "$MIRRORURL" -O "$MIRRORLIST" &>/dev/null; then
		evaluate_retval "1"
		log_error "Unable to fetch new mirror list from $MIRRORURL"
		log_error "Check your internet!"
		return 1
	fi
	evaluate_retval "$?"
	return 0
}

sh_getlocale() {
	local lc

	LC_DEFAULT="${Aidioma[pt_BR]}"
	LOCALE="pt_BR"
	if lc=$(grep _ <(locale -a) | head -1 | cut -c1-5); then
		LOCALE="$lc"
		LC_DEFAULT="${Aidioma[$lc]}"
	fi
}

sh_setlanguage() {
	langmsg=(
		'lang=("pt_BR"
			"en_US"
			"de_DE"
			"fr_FR"
			"es_ES"
			"it_IT")'
     'cmsg_ERRO=("ERRO"
         "ERROR"
         "ERROR"
         "ERREUR"
         "ERROR"
         "ERRORE")'
   'cmsg_CommandNotFound=("não encontrei o comando"
      "i didn t find the command"
      "ich habe den Befehl nicht gefunden"
      "je n ai pas trouvé la commande"
      "no encontre el comando"
      "non ho trovato il comando")'
   'cmsg_ImpossivelContinuar=("IMPOSSÍVEL CONTINUAR"
      "IMPOSSIBLE TO CONTINUE"
      "UNMÖGLICH WEITER"
      "IMPOSSIBLE DE CONTINUER"
      "IMPOSIBLE CONTINUAR"
      "IMPOSSIBILE CONTINUARE")'
   'cmsg_ImpossivelContinuar1=("Esse script precisa dos comandos listados acima"
      "This script needs the commands listed above"
      "Dieses Skript benötigt die oben aufgeführten Befehle"
      "Ce script a besoin des commandes listées ci-dessus"
      "Este script necesita los comandos enumerados anteriormente"
      "Questo script necessita dei comandi sopra elencati")'
   'cmsg_ImpossivelContinuar2=("Instale-os e/ou verifique se estão no seu"
      "Install them and/or make sure they are on your"
      "Installieren Sie sie und/oder vergewissern Sie sich, dass sie sich auf Ihrem befinden"
      "Installez-les et/ou assurez-vous qu ils sont sur votre"
      "Instálelos y/o asegúrese de que estén en su"
      "Installali e/o assicurati che siano sul tuo")'
   'cmsg_InstCommand=("Instalar o(s) comando(s)"
      "Install the command(s)"
      "Befehl(e) installieren"
      "Installez la ou les commandes"
      "Instale los comandos"
      "Installa i comandi")'
   'cmsg_RunNew=("INFO: Rode novamente o aplicativo"
      "INFO: Run the application again"
      "INFO: Führen Sie die Anwendung erneut aus"
      "INFO : Exécutez à nouveau l application"
      "INFO: Vuelva a ejecutar la aplicación"
      "INFORMAZIONI: eseguire nuovamente l applicazione")'
   'cmsg_RunNewErro=("ERRO na instalação dos comandos. Tente manualmente."
      "ERROR installing commands. Try manually."
      "FEHLER beim Installieren von Befehlen. Versuchen Sie es manuell."
      "ERREUR lors de l installation des commandes. Essayez manuellement."
      "ERROR al instalar comandos. Prueba manualmente."
      "ERRORE durante l installazione dei comandi. Prova manualmente.")'
	)
	for xmsg in "${langmsg[@]}"; do eval "$xmsg"; done
	#echo "lang       ${#lang[@]} ${lang[@]} ${lang[$PT_BR]} ${lang[$EN_US]}"
	#echo "cmsg_ERRO ${#cmsg_ERRO[@]} ${cmsg_ERRO[@]} ${cmsg_ERRO[$PT_BR]} ${cmsg_ERRO[$EN_US]}"
}

sh_setvarcolors
sh_setambiente
sh_getlocale
sh_setlanguage
sh_logprefix
[[ "$1" = @(-V|-v|version|-version|--version) ]] && { sh_version; exit $(( $# ? 0 : 1 ));}
[[ -z $1 ]] && {
   sh_usage
   exit $(($# ? 0 : 1))
}
sh_checkDependencies
init "$@"
sh_check_mirror_path
sh_checknet "${URL_GOOGLE}"
sh_checknet "${MIRRORURLROOT}" || exit 1
sh_download_mirrors_list
sh_getMirrors || exit 1

# sanity checks
case $(( update+nping+ncurl )) in
      0) die 'no operation specified (use -h for help)' ;;
   [^1]) die 'only one operation may be used at a time' ;;
esac
for x in "${appexec[@]}"; do $x; done
