#!/usr/bin/env bash
#shellcheck disable=SC2145,SC2001,SC2188,SC2015,SC2155,SC2317,SC2320,SC2291,SC2034,SC2016,SC2154,SC2207,SC2166,SC2128,SC2059,SC2140,SC2031,SC2030,SC2036

#  void-install
#  Created: 2023/04/25
#  Altered: 2023/04/27
#
#  Copyright (c) 2022-2023, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#debug
export PS4='${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x
#set -e
shopt -s extglob

#system
readonly APP="${0##*/}"
readonly _VERSION_='0.0.10-20230427'

sh_diahora() {
	DIAHORA=$(date +"%d%m%Y-%T" | sed 's/://g')
	printf "%s\n" "$DIAHORA"
}

sh_setenvironment() {
	declare -gA Alocale=([0]=pt_BR [1]=en_US [2]=de_DE [3]=fr_FR [4]=es_ES [5]=it_IT)
	tput sgr0 # reset colors
	bold=$(tput bold)
	reset=$(tput sgr0)
	white="${bold}$(tput setaf 7)"
	black="${bold}$(tput setaf 0)"
	red=$(tput bold)$(tput setaf 196)
	green=$(tput setaf 2)
	yellow=$(tput bold)$(tput setaf 3)
	blue=$(tput setaf 4)
	pink=$(tput setaf 5)
	cyan=$(tput setaf 6)
	orange=$(tput setaf 3)
	purple=$(tput setaf 125);
	violet=$(tput setaf 61);
	force=0
	readonly BOOTLOG="/tmp/$APP-$(sh_diahora).log"
	COL_NC='\e[0m' # No Color
	COL_LIGHT_GREEN='\e[1;32m'
	COL_LIGHT_RED='\e[1;31m'
	TICK="$white[${COL_LIGHT_GREEN}✓${COL_NC}${white}]"
	CROSS="$white[${COL_LIGHT_RED}✗${COL_NC}$white]"
	INFO="[i]"
	# shellcheck disable=SC2034
	DONE="${COL_LIGHT_GREEN} done!${COL_NC}"
	OVER="\\r\\033[K"
	DOTPREFIX="  ${black}::${reset} "
	readonly LOGGER='/dev/tty8'
	sh_getLocale
}

sh_unsetvarcolors() {
	bold=		reset=	cyan=		red=		blue=
	white=	black=	green=	yellow=	orange=
	pink=		cyan=		purple=	violet=
}

sh_getLocale() {
   local lc

	LC_DEFAULT="${Alanguage[pt_BR]}"
   LOCALE="pt_BR"
   if lc=$(grep _ <(locale -a) | head -1 | cut -c1-5); then
      LOCALE="$lc"
      LC_DEFAULT="${Alanguage[$lc]}"
   fi
}

readconf() {
	if [[ $LC_DEFAULT -eq 0 ]]; then
		read -r -p "$@ [S/n]"
	else
		read -r -p "$@ [Y/n]"
	fi
	[[ ${REPLY^} == "" ]] && return 0
	[[ ${REPLY^} == N  ]] && return 1 || return 0
}

readnotconf() {
	if [[ $LC_DEFAULT -eq 0 ]]; then
		read -r -p "$@ [s/N]"
	else
		read -r -p "$@ [y/N]"
	fi
	[[ ${REPLY^} == "" ]]  && return 1
	[[ ${REPLY^} == N  ]]  && return 1 || return 0
}

die() {
	local msg=$1; shift
	printf "  %b %s\\n" "${CROSS}" "${bold}${red}${msg}"
	exit 1
}

sh_checkRoot() {
	local str="Root user check"
	if [[ "$(id -u)" != "0" ]]; then
		die "${red} error: you cannot perform this operation unless you are root."
		exit 1
	fi
	printf "  %b %s\\n" "${TICK}" "${str}"
	return 0
}

log_msg() {
	local retval="${PIPESTATUS[0]}"

	if [[ $retval -eq 0 ]]; then
		printf "  %b %s\\n" "${TICK}" "${*}"
	else
		printf "  %b %s\\n" "${CROSS}" "${*}"
	fi
}

sh_version() {
	printf "%s\n" "${black}${0##*/} v${_VERSION_}${reset}"
	printf "${bold}${black}Copyright (C) 2023 vcatafesta@gmail.com\n\
GPLv3+ License: GNU GPL version 3 or later <https://gnu.org/licenses/gpl.html>\n\
This is free software: you are free to change and redistribute it.\n\
THERE IS NO WARRANTY, to the fullest extent permitted by law.${reset}\n"
}

sh_usage() {
	cat <<EOF
${black}${APP} v$_VERSION_ ${reset}
Usage: ${red}$0 -r|--remove <VG> [-l|--list] [-f|--force] [-V|--version] [-n|--nocolor] [-h|--help]

${cyan}[<operations>] ${reset}
   ${red}-r  --remove${cyan}        #remove VG (mandatory)
   ${red}-l  --list${cyan}          #list VGs
   ${red}-f  --force${cyan}         #to force
   ${red}-V  --version${cyan}       #print application version
   ${red}-n  --nocolor${cyan}       #remove colors from output
   ${red}-h  --help${cyan}          #this help
EOF
	exit 1
}

limpa_vm() {
	echo -n ${black};
	log_msg "${green}starting cleaning";

	umount -Rl /mnt/voidlinux 2>&1 | tee -i -a "$BOOTLOG" > "$LOGGER"
	log_msg "${black}Unmounting FS  : ${orange}/mnt/voidlinux"

	umount -Rl /dev/$_vg/* 2>&1 | tee -i -a "$BOOTLOG" > "$LOGGER"
   log_msg "${black}Unmounting LVs : ${orange}/dev/$_vg/*"

   lvremove -ff /dev/$_vg/* 2>&1 | tee -i -a "$BOOTLOG" > "$LOGGER"
   log_msg "${black}Removing LVs   : ${orange}/dev/$_vg/*"

   vgremove -ff $_vg 2>&1 | tee -i -a "$BOOTLOG" > "$LOGGER"
   log_msg "${black}Removing VG    : ${orange}$_vg"

#	log_msg "${black}Removing PVs (Volumes Fisícos)";
#	pvremove -ff ${AConfFde[partition]} 2>&1 | tee -i -a "$BOOTLOG" > "$LOGGER"
	log_msg "${green}Skipping PVs removal (maybe want to recover something)"
	log_msg "${green}Done.${white}"
	vgs -v; echo; pvs -v; echo; lvs -v

:<<'REMARK'
	log_msg "${black}Desmontando FS em       : ${orange}/mnt/voidlinux";
		umount -Rl /mnt/voidlinux >/dev/null 2>&-
	log_msg "${black}Desativando partições lógicas";
		lvchange -an /dev/$_vg/root >/dev/null 2>&-
		lvchange -an /dev/$_vg/swap >/dev/null 2>&-
		lvchange -an /dev/$_vg/home >/dev/null 2>&-
		vgchange -an $_vg >/dev/null 2>&-
	#dmsetup info >/dev/null 2>&-
	log_msg "${black}Removendo Volume Group  : ${orange}$_vg";
		vgremove -ff $_vg >/dev/null 2>&-
	log_msg "${black}Removendo Volume lógico : ${orange}/dev/$_vg/root";
		lvremove /dev/$_vg/root >/dev/null 2>&-
	log_msg "${black}Removendo Volume lógico : ${orange}/dev/$_vg/swap";
		lvremove /dev/$_vg/swap >/dev/null 2>&-
	log_msg "${black}Removendo Volume lógico : ${orange}/dev/$_vg/home";
		lvremove /dev/$_vg/home >/dev/null 2>&-
	log_msg "${black}Removendo Volume lógico : ${orange}/dev/$_vg/var";
		lvremove /dev/$_vg/var >/dev/null 2>&-
	log_msg "${black}Removendo Label Volume físico: ${orange}/dev/mapper/$_vg";
		pvremove -ff /dev/mapper/$_vg >/dev/null 2>&-
	dmsetup remove $_vg >/dev/null 2>&-
#	dmsetup info >/dev/null 2>&-
	log_msg "${green}Feito.${white}"
	vgs -v
	echo
	pvs -v
	echo
	lvs -v
REMARK
}

sh_setenvironment
OPTIONS=r:lfVnh
LONGOPTIONS=remove:,list,force,version,nocolor,help
opts=$(getopt --options=$OPTIONS --longoptions=$LONGOPTIONS --name "$0" -- "$@")
if [ $? -ne 0 ]; then
	sh_usage; exit $(( $# ? 0 : 1 ))
fi
eval set -- "$opts"

while true; do
	case "$1" in
		-r|--remove)	_vg="$2"; shift 2;;
		-l|--list)     sh_checkRoot; log_msg "Listing VGs ..."; echo -n ${cyan};vgs --noheadings;exit $(( $# ? 0 : 1 ));;
		-f|--force)    force=1;log_msg "Enabling force mode"; shift;;
		-n|--nocolor)  sh_unsetvarcolors;shift;;
		-V|--version)  sh_version;exit 0;;
		-h|--help)     sh_usage;exit 0;;
		--)            shift;break;;
		*) 				sh_usage; exit $(( $# ? 0 : 1 ));;
	esac
done

if [ -z "$_vg" ]; then
	sh_usage; exit $(( $# ? 0 : 1 ))
fi
sh_checkRoot
VGs="$(vgs --noheadings)"
echo "VGs available : "
echo -n ${cyan}; vgs --noheadings
echo ${reset}"VG to remove : "
echo "  ${yellow}$_vg"
echo
if grep -o -q "$_vg " <<< "$VGs"; then
	if ! (( force )) ; then
		if ! readnotconf "${red}CAREFUL! ${reset}This procedure is ${red}irreversible! ${reset}continue with the removal of ?"; then
			die "Cancelled"
		fi
	fi
	limpa_vm "$@"
else
	die "Cancelled! => '${yellow}$_vg${red}' not found!"
fi

