#!/usr/bin/env bash
#shellcheck disable=SC2034,SC2059,SC2145,SC2155

#  void-gitclone
#  Created: 2023/01/27
#  Altered: 2023/04/30
#
#  Copyright (c) 2022-2023, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#debug
export PS4='${red}${0##*/}${green}[$FUNCNAME]${pink}[$LINENO]${reset} '
#set -x
#set -e
set -o errexit
set -o pipefail

#system
readonly APP="${0##*/}"
readonly _VERSION_='0.1.02-20230430'
readonly DEPENDENCIES=(git)
trap 'printf "\n${red}Interrupted! exiting...\n"; cleanup; exit 0' INT TERM HUP
declare VERBOSE=0

sh_ambiente() {
	readonly true=0
	readonly false=1
	readonly BOOTLOG="/tmp/$APP-$(sh_diahora).log"
}

info_msg() {
	printf "\033[1m$@\n\033[m"
	return "$true"
}

cleanup() {
	info_msg "Removing temporary files"
	rm -f "$BOOTLOG"
	exit "$false"
}

sh_diahora() {
	DIAHORA=$(date +"%d%m%Y-%T")
	DIAHORA="${DIAHORA//:/}"
	printf "%s\n" "$DIAHORA"
	return "$true"
}

sh_checkroot() {
	if [ "$(id -u)" != "0" ]; then
		die "${red}error: you cannot perform this operation unless you are root.${reset}"
	fi
	return "$true"
}

sh_checkDependencies() {
	local d
	local errorFound=0
	declare -a missing

	for d in "${DEPENDENCIES[@]}"; do
		[[ -z $(command -v "$d") ]] && missing+=("$d") && errorFound=1 && printf "${red}ERROR: I couldn't find the command ${cyan}'$d'${reset}\n"
	done
	if (( errorFound )); then
		echo -e "${yellow}-------------IMPOSSIBLE TO CONTINUE-----------------${reset}"
		echo -e "This script needs the commands listed above" >&2
		echo -e "Install them and/or make sure they are on your \$PATH" >&2
		echo -e "${yellow}----------------------------------------------------${reset}"
		die "${APP} aborted..."
	fi
	return "$true"
}

sh_setvarcolors() {
	# does the terminal support true-color?
	if [[ -n $(command -v "tput") ]]; then
		#tput setaf 127 | cat -v  #capturar saida
		tput sgr0 # reset colors
		bold=$(tput bold)
		reset=$(tput sgr0)
		red=$(tput setaf 1)
		green=$(tput setaf 2)
		yellow=$(tput bold)$(tput setaf 3)
		blue=$(tput setaf 4)
		pink=$(tput setaf 5)
		cyan=$(tput setaf 6)
	else
		reset="\e[0m"
		bold="\e[1m"
		italic="\e[3m"
		underline="\e[4m"
		red="\e[31m"
		green="\e[32m"
		yellow="\e[33m"
		blue="\e[34m"
		pink="\e[35m"
		cyan="\e[36m"
		gray="\e[90m"
		white="\e[97m"
	fi
	return 0
}

sh_unsetvarcolors() {
	reset=
	bold=
	italic=
	underline=
	red=
	green=
	yellow=
	blue=
	pink=
	cyan=
	gray=
	white=
	return 0
}

DOT() {
	printf "${blue}:: ${reset}"
	return "$true"
}

die() {
	local msg=$1; shift
	printf "$(DOT)${bold}${red}$msg${reset}\n" >&2
	exit "$false"
}

# Função para exibir a versão
sh_version() {
	printf "${bold}${cyan}${0##*/} v${_VERSION_}${reset}"
	return "$true"
}

sh_usage() {
	echo -e "${pink}Usage: $0 [-h|--help] [-v|--version] [-V|--verbose] [-f|--file FILE]${reset}"
	echo -e ""
	echo -e "${yellow}Options:${reset}"
	echo -e "  -h, --help       Display this help message and exit."
	echo -e "  -v, --version    Display version information and exit."
	echo -e "  -V, --verbose    Enable verbose output."
	echo -e "  -n, --nocolor    colorless output."
	echo -e "  -f, --file FILE  Use FILE as repository entry."
	exit 0
}

sh_git_clone_read(){
	echo "Insira o(s) repositório(s) que deseja clonar (separados por espaço):"
	read -r repos

	# Converte a string de repositórios em um array
	IFS=' ' read -r -a repos_array <<< "$repos"

	for repo in "${repos_array[@]}"; do
	    echo "Clonando o repositório $repo..."
	    git clone "$repo"
	done
}

sh_git_clone_file() {
	# Lê os repositórios do arquivo de texto e clona cada um deles
	while read -r repo
	do
		if ! git clone "$repo" >>"$BOOTLOG" 2>&1; then
			info_msg "${red}git error (result=${PIPESTATUS[0]}) -> $repo : Something went wrong! url?! - See $BOOTLOG for more info.${reset}"
		else
			info_msg "${green}git clone OK (result=${PIPESTATUS[0]}) -> $REPLY : repository successfully cloned! - See $BOOTLOG for more info.${reset}"
		fi
	done < "$FILE"
}

sh_gitclone(){
	while read -r -p "Insert a git repository, enter to exit: "
	do
		[ "${REPLY^}" == "" ] && return $false
		echo "${REPLY}" >> "$BOOTLOG"
		if ! git clone "${REPLY}" >>"$BOOTLOG" 2>&1; then
			info_msg "${red}git error (result=${PIPESTATUS[0]}) -> $REPLY : Something went wrong! url?! - See $BOOTLOG for more info.${reset}"
		else
			info_msg "${green}git clone OK (result=${PIPESTATUS[0]}) -> $REPLY : repository successfully cloned! - See $BOOTLOG for more info.${reset}"
		fi
		echo
	done
	return "$true"
}

sh_setvarcolors
sh_ambiente
sh_checkDependencies
[[ "$1" = @(-V|--version) ]] && { sh_version; exit $(( $# ? 0 : 1 ));}

# Função para tratamento de erros
handle_error() {
	echo "${red}Error: Failed to parse arguments." >&2
	sh_usage >&2
}

# Define as opções permitidas
OPTIONS=f:vhVn
LONGOPTIONS=file:,version,verbose,help,nocolor

# Processa as opções
if ! (( opts=$(getopt --options=$OPTIONS --longoptions=$LONGOPTIONS --name "$0" -- "$@") )); then
	sh_usage
fi
eval set -- "$opts"

# Processa cada argumento
while true; do
	case "$1" in
		-f|--file) 		FILE="$2";shift 2;;
		-V|--version)	sh_version;exit 0;;
		-v|--verbose)	VERBOSE=1;shift;;
		-h|--help)		sh_usage;;
		-n|--nocolor)	sh_unsetvarcolors;shift;;
		--)				shift;break;;
		:) echo "Option -$OPTARG requires an argument" >&2; handle_error;;
		*) handle_error;;
  esac
done

if (( VERBOSE )); then
	info_msg "${green}verbose mode on${reset}"
fi

# Verifica se o arquivo existe
if [ -n "$FILE" ]; then
	if [ ! -f "$FILE" ]; then
	  die "Arquivo de repositórios não encontrado."
	else
		sh_git_clone_file "$@"
		exit 0
	fi
fi
sh_gitclone "$@"

